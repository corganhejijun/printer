// Created on: 1996-12-19
// Created by: Robert COUBLANC
// Copyright (c) 1996-1999 Matra Datavision
// Copyright (c) 1999-2014 OPEN CASCADE SAS
//
// This file is part of Open CASCADE Technology software library.
//
// This library is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License version 2.1 as published
// by the Free Software Foundation, with special exception defined in the file
// OCCT_LGPL_EXCEPTION.txt. Consult the file LICENSE_LGPL_21.txt included in OCCT
// distribution for complete text of the license and disclaimer of any warranty.
//
// Alternatively, this file may be used under the terms of Open CASCADE
// commercial license or contractual agreement.

inline Standard_Boolean AIS_Drawer::WasLastLocal() const
{
  return Standard_False;
}

inline Standard_Boolean AIS_Drawer::HasLocalAttributes() const
{
  return hasLocalAttributes;
}

inline Standard_Real AIS_Drawer::PreviousDeviationCoefficient() const
{
  return myhasOwnDeviationCoefficient ? myPreviousDeviationCoefficient : 0.0;
}

inline Standard_Real AIS_Drawer::PreviousHLRDeviationCoefficient() const
{
  return myhasOwnHLRDeviationCoefficient ? myPreviousHLRDeviationCoefficient : 0.0;
}

inline Standard_Real AIS_Drawer::PreviousDeviationAngle() const
{
  return myhasOwnDeviationAngle ? myPreviousDeviationAngle : 0.0;
}

inline Standard_Real AIS_Drawer::PreviousHLRDeviationAngle() const
{
  return myhasOwnHLRDeviationAngle ? myPreviousHLRDeviationAngle : 0.0;
}

inline void AIS_Drawer::Link (const Handle(Prs3d_Drawer)& theDrawer)
{
  myLink = theDrawer;
}

inline Standard_Boolean AIS_Drawer::HasLink() const
{
  return !myLink.IsNull();
}

inline void AIS_Drawer::SetDeviationCoefficient()
{
  myhasOwnDeviationCoefficient = Standard_False;
}

inline void AIS_Drawer::SetHLRDeviationCoefficient()
{
  myhasOwnHLRDeviationCoefficient = Standard_False;
}

inline void AIS_Drawer::SetDeviationAngle()
{
  myhasOwnDeviationAngle = Standard_False;
}

inline void AIS_Drawer::SetHLRAngle()
{
  myhasOwnHLRDeviationAngle = Standard_False;
}

inline Standard_Boolean AIS_Drawer::IsOwnDeviationCoefficient() const
{
  return myhasOwnDeviationCoefficient;
}

inline Standard_Boolean AIS_Drawer::IsOwnDeviationAngle() const
{
  return myhasOwnDeviationAngle;
}

inline Standard_Boolean AIS_Drawer::IsOwnHLRDeviationCoefficient() const
{
  return myhasOwnHLRDeviationCoefficient;
}

inline Standard_Boolean AIS_Drawer::IsOwnHLRDeviationAngle() const
{
  return myhasOwnHLRDeviationAngle;
}

inline Standard_Boolean AIS_Drawer::HasTextAspect() const
{
  return !myTextAspect.IsNull();
}

inline Standard_Boolean AIS_Drawer::HasWireAspect() const
{
  return !myWireAspect.IsNull();
}

inline Standard_Boolean AIS_Drawer::HasLineAspect() const
{
  return !myLineAspect.IsNull();
}

inline Standard_Boolean AIS_Drawer::HasShadingAspect() const
{
  return !myShadingAspect.IsNull();
}

inline Standard_Boolean AIS_Drawer::HasPointAspect() const
{
  return !myPointAspect.IsNull();
}

inline Standard_Boolean AIS_Drawer::IsOwnVertexDrawMode() const
{
  return (myVertexDrawMode != Prs3d_VDM_Inherited);
}

inline Standard_Boolean AIS_Drawer::HasDatumAspect() const
{
  return !myDatumAspect.IsNull();
}

inline Standard_Boolean AIS_Drawer::HasPlaneAspect() const
{
  return !myPlaneAspect.IsNull();
}

inline Standard_Boolean AIS_Drawer::HasUIsoAspect() const
{
  return !myUIsoAspect.IsNull();
}

inline Standard_Boolean AIS_Drawer::HasVIsoAspect() const
{
  return !myVIsoAspect.IsNull();
}

inline Standard_Boolean AIS_Drawer::HasFreeBoundaryAspect() const
{
  return !myFreeBoundaryAspect.IsNull();
}

inline Standard_Boolean AIS_Drawer::HasUnFreeBoundaryAspect() const
{
  return !myUnFreeBoundaryAspect.IsNull();
}

inline Standard_Boolean AIS_Drawer::IsOwnFaceBoundaryDraw() const
{
  return myHasOwnFaceBoundaryDraw;
}

inline Standard_Boolean AIS_Drawer::IsOwnFaceBoundaryAspect() const
{
  return !myFaceBoundaryAspect.IsNull();
}

inline void AIS_Drawer::SetTypeOfHLR (const Prs3d_TypeOfHLR theTypeOfHLR)
{
  myTypeOfHLR = theTypeOfHLR;
}

inline Prs3d_TypeOfHLR AIS_Drawer::TypeOfHLR() const
{
  return (myTypeOfHLR == Prs3d_TOH_NotSet) ? myLink->TypeOfHLR() : myTypeOfHLR;
}

inline Standard_Boolean AIS_Drawer::HasDimensionAspect() const
{
  return !myDimensionAspect.IsNull();
}
